// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestPanda.Api.DomainEntities;

namespace TestPanda.Api.Migrations
{
    [DbContext(typeof(TestPandaContext))]
    [Migration("20190113020123_TestPandaDbInitialMigration")]
    partial class TestPandaDbInitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestPanda.Api.DomainEntities.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateBlocked");

                    b.Property<int>("TestUserId");

                    b.HasKey("Id");

                    b.HasIndex("TestUserId");

                    b.ToTable("Block");
                });

            modelBuilder.Entity("TestPanda.Api.DomainEntities.TestCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActiveBlockId");

                    b.Property<string>("Comments");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Reason");

                    b.Property<int>("State");

                    b.Property<int?>("TestPlanId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ActiveBlockId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TestPlanId");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("TestPanda.Api.DomainEntities.TestPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("TestRunId");

                    b.Property<string>("Title");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TestRunId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("TestPlans");
                });

            modelBuilder.Entity("TestPanda.Api.DomainEntities.TestRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("TestUserId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("TestUserId");

                    b.ToTable("TestRuns");
                });

            modelBuilder.Entity("TestPanda.Api.DomainEntities.TestUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<int>("Role");

                    b.HasKey("Id");

                    b.ToTable("TestUsers");
                });

            modelBuilder.Entity("TestPanda.Api.DomainEntities.Block", b =>
                {
                    b.HasOne("TestPanda.Api.DomainEntities.TestUser", "BlockedBy")
                        .WithMany()
                        .HasForeignKey("TestUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestPanda.Api.DomainEntities.TestCase", b =>
                {
                    b.HasOne("TestPanda.Api.DomainEntities.Block", "ActiveBlock")
                        .WithMany()
                        .HasForeignKey("ActiveBlockId");

                    b.HasOne("TestPanda.Api.DomainEntities.TestUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TestPanda.Api.DomainEntities.TestPlan")
                        .WithMany("TestCases")
                        .HasForeignKey("TestPlanId");
                });

            modelBuilder.Entity("TestPanda.Api.DomainEntities.TestPlan", b =>
                {
                    b.HasOne("TestPanda.Api.DomainEntities.TestUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TestPanda.Api.DomainEntities.TestRun")
                        .WithMany("TestPlans")
                        .HasForeignKey("TestRunId");

                    b.HasOne("TestPanda.Api.DomainEntities.TestUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("TestPanda.Api.DomainEntities.TestRun", b =>
                {
                    b.HasOne("TestPanda.Api.DomainEntities.TestUser", "Tester")
                        .WithMany()
                        .HasForeignKey("TestUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
